Given a database with two tables, one of which holds longitude, latitude, and production amount data for several Irish raw material locations, and another table which holds longitude and latitude data for Irish port locations, I have produced a solution to calculate the most efficient Plant and Port location using Python programming. 

To understand the process and what was needed, I first used sample data and thought through the process using a simple excel spreadsheet. Once I understood the needed algorithm on excel, it was a matter of transferring my understanding to python code. First, I imported the given database and established a connection. Then, to work with the data, I decided to create lists of Latitude, Longitude and Production from the Location table, and lists of Longitude and Latitude from the Ports table. In the case of the list for Production, I established a way to standardize the data into “monthly trips or hauls” by dividing our given Production numbers by 12 months multiplied by an arbitrary tonnage number (ex: 30 tons). 

Following the creation of these lists, I created four functions. 

The first function uses the Vincenty method of measuring distance between two locations which lie on the surface of a sphere (ex: longitude/latitude on earth). In order to use this Geopy distance module, I had to install Geopy on my laptop device. This function measures the distance between each of the raw materials locations in kilometers, then multiplies those distances by the Plant_Production list previously created and then appends these results to a new list called Plant_Distance.

The second function I created also uses the Vincenty method of measuring distance. This function measures the distance between each of the raw material locations and each of the Port locations in kilometers, then multiplies those distances by the End_Product list previously created and then appends these results to a new list called Port_Distance.

The third function I created calculates the total distance our trucks will travel between a chosen plant location and a chosen port location. It then sums the distances traveled between all other raw material locations and our chosen plant location. This information is then appended to a new list called Total_Distance.

The fourth and final function I created takes the Total_Distance list created and attempts to locate the distance between a Plant and a Port that will return the least amount of kilometers. 

Finally, to return the end product that we need, I created different variables. In order to calculate the most efficient location to create a new plant, I divided the smallest distance possible, found through our Total_Distance list, by the amount of port latitudes that exist in our data. To return the most efficient port location, I set a variable equivalent to the list created in the last function with the a parameter of z, which is equivalent to the smallest distance possible in our Total_Distance list.  

Using the method I have described, my results are as follows: 
The most efficient location to create a new Plant would be the location corresponding to number 5 in our given data set (first location begins at zero), and the most efficient Port location would be the port location corresponding to number 1 (first location begins at zero). 